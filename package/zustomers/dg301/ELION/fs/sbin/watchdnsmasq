#!/bin/sh

. /lib/functions.sh
. /usr/share/libubox/jshn.sh

local DEFA_NSF="/tmp/resolv.conf.default"
local _vno=0

update_dnsmasq_bind_list() {
	local vif="$1"
	local wdev="$2"
	local device
	local network net
	local radio
	local iface ifc
	config_get device "$vif" device
	config_get network "$vif" network
	config_get radio "$device" radio

	[ "$wdev" == "$device" ] || continue

	[ $_vno -eq 0 ] && iface="$wdev" || iface="$wdev"."$_vno"

	local dnsmasq="0"
	local bridged="0"
	local dhcpnet="0"
	local dhcpat="$(uci -q get dhcp.$network)"
	local dhcpignr="$(uci -q get dhcp.$network.ignore)"
	local nwldcrd="$(uci -q get dhcp.@dnsmasq[0].nonwildcard)"
	local found="0"
	local found6="0"
	local status="0"

	if [ "$(uci -q get network.$network.type)" == "bridge" ]; then
		bridged="1"
	fi
	if [ -n "$dhcpat" -a "$dhcpignr" != "1" ]; then
		dhcpnet="1"
	fi
	if [ "$bridged" == "0" -a "$dhcpnet" == "1" -a "$nwldcrd" == "1" -a "$radio" != "off" ]; then
		dnsmasq="1"
	fi

	for ifc in $(uci get dhcp.@dnsmasq[0].interface); do
		[ "$ifc" == "$iface" ] && found="1"
	done

	for net in $(uci get 6relayd.default.network); do
		[ "$net" == "$network" ] && found6="1"
	done

	ifconfig $iface | grep -q UP && status="1"

	if [ "$dnsmasq" == "1" ] ; then
		if [ "$found" != "1" -a "$status" == "1" ] ; then
			uci add_list dhcp.@dnsmasq[0].interface="$iface"
			uci commit dhcp
			nvram set dnsmasq_restart="1"
		fi
		if [ "$found6" != "1" -a "$status" == "1" ]; then
			uci add_list 6relayd.default.network="$network"
			uci commit 6relayd
			nvram set 6relayd_restart="1"
		fi
	else
		if [ "$found" == "1" ] ; then
			uci del_list dhcp.@dnsmasq[0].interface="$iface"
			uci commit dhcp
			nvram set dnsmasq_restart="1"
		fi
		if [ "$found6" == "1" -a "$bridged" == "0" ] ; then
			uci del_list 6relayd.default.network="$network"
			uci commit 6relayd
			nvram set 6relayd_restart="1"
		fi
	fi
	_vno=$((_vno+1))
}

dnsmasq_bind_check() {
	config_load wireless
	config_foreach update_dnsmasq_bind_list wifi-iface "wl0"
	_vno=0
	config_foreach update_dnsmasq_bind_list wifi-iface "wl1"
	_vno=0
}

populate_nameservers() {
	local up nserv
	json_load "$(ifstatus $1)"
	json_get_var up up
	if [ "$up" == "1" ]; then
		json_select dns-server
		local _i=1
		while json_get_var nserv $_i; do
			echo "nameserver $nserv" >> $DEFA_NSF
			_i=$((_i + 1))
		done
		json_select ..
	fi
}

local populate restart reload pid cnt
local relay6d range addr duplicate

nvram set dnsmasq_populate=1

while true; do
	dnsmasq_bind_check

	populate=$(nvram get dnsmasq_populate)
	restart=$(nvram get dnsmasq_restart)
	reload=$(nvram get dnsmasq_reload)
	pid=$(pgrep dnsmasq)
	relay6d=$(nvram get 6relayd_restart)
	range=$(grep range /var/etc/dnsmasq.conf)
	addr=$(grep address /var/etc/dnsmasq.conf)
	duplicate=$(sort /var/etc/dnsmasq.conf | uniq -d)
	cnt=0

	if [ "$relay6d" == "1" ]; then
		nvram set 6relayd_restart=0
		/etc/init.d/6relayd restart
	fi

	if [ "$populate" == "1" ]; then
		nvram set dnsmasq_populate=0
		rm -f $DEFA_NSF
		while [ $cnt -le 1 ]; do
			populate_nameservers "internet"
			populate_nameservers "mobile"
			[ -f $DEFA_NSF ] && break || sleep 2
			cnt=$((cnt+1))
		done
		nvram set dnsmasq_reload=1
	fi

	if [ -z "$pid" -o "$restart" == "1" -o -z "$range" -o -z "$addr" -o -n "$duplicate" ]; then
		nvram set dnsmasq_restart=0
		nvram set dnsmasq_reload=0
		rm -f /var/etc/dnsmasq.conf
		/etc/init.d/dnsmasq restart
	elif [ "$reload" == "1" ]; then
		nvram set dnsmasq_reload=0
		killall -SIGHUP dnsmasq
	fi

	sleep 10
done
